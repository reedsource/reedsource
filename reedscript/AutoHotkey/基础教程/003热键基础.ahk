#NoEnv

/*
修饰符
!	alt
^	ctrl
+	shift
#	win
*/


;=== !	alt ===========================================================================================
; 修饰符的修饰符
; Alt 分为两个 可以进一步修饰左Alt还是右Alt
; < 使用成对按键中左边的那个. 例如 <!a 相当于 !a, 只是使用左边的 Alt 键才可以触发.
; > 使用成对按键中右边的那个。区分键盘上ctrl、alt、win、shift的左右，这样左右按键都可以作为单独的修饰符使用。
/*


;=== ^	ctrl ===========================================================================================

/*
要在热键中使用多个修饰键, 那么需要把它们连续地列出来
(多个修饰符排列顺序不影响热键，即 ^!s等同于!^s).
下面的例子中使用 ^!s 来表示 ctrl+Alt+S:
*/
^!s::
        run www.autoahk.com
return

^!delete::   ;ctrl + alt + delete 开启windows登录管理界面

;=== +	shift ===========================================================================================


;=== #	win ===========================================================================================
;001中 Win+`被设置为打开中文社区网站，它的完整写法如下
;符号 [#] 表示 Win 键, 它被称为 修饰符
;在前面的最后一行中, return 用来结束此热键.
;不过, 如果热键只需要执行单行语句, 那么此行可以直接放在双冒号的右边.
;换句话说, return 可以省略:
#`::
        Run www.autoahk.com
return

#a::
	Send, e ; 这组热键，你按住win键，按下a的同时，会发送e上屏
return

; 这里的上屏 l 是特殊的 在win中 win+l是锁定键  所以当win+快捷键 触发了l时 会延后上屏
#s::
	Send, l ; 这组热键，你按住win键，按下s无反应，抬起s无反应，直到松开win键，l上屏
return

#L::         ;win + L 注销windows当前登录状态


;=== ~  颚化符 ===========================================================================================

/*
~ 添加这个符号后，激发热键时, 不会屏蔽(被操作系统隐藏) 热键中按键原有的功能。
换句话说，按键原有功能将与AHK设定的热键功能并行激活。
但也有例外：设计单独热键时，win键不会被覆盖，还有两个无法被覆盖功能的高系统优先级的组合键，
这两个热键创建不会覆盖原有的按键功能。
*/
;a::LButton  ;这个热键把a键映射为Click鼠标左键单击命令，当按下a键，仅执行左键单击功能而不输出字符a。
~a::LButton   ;此时热键可以添加~前缀，保留原本a键的输出。
~3 & 4::     ;保留3-4两个按键功能
~^c::      ;保留ctrl+c复制功能

~RButton::MsgBox 你点击了鼠标右键.
~RButton & C::MsgBox 你按下鼠标右键的同时点击了C按键.

/*
如果颚化符前缀只应用于自定义组合键, 而不应用于非组合热键,
按键的原生功能将持续被屏蔽. 例如, 下面的脚本,
按住 Menu 键将会一直显示一个 ToolTip 而不会触发上下文菜单:

注意：只要有一个键盘热键有颚化符修饰, 热键总是使用键盘钩子。

通过~实现保留按键的原始功能，这样相当于通过热键填充了原按键的功能。
*/
AppsKey::ToolTip Press < or > to cycle through windows.
AppsKey Up::ToolTip
~AppsKey & <::Send !+{Esc}
~AppsKey & >::Send !{Esc}


;=== *  通配符 ===========================================================================================
;通配符: 即使附加的修饰键被按住也能激发热键. 这常与重映射按键或按钮组合使用. 例如:
*#c::Run Calc.exe ; Win+C,Shift+Win+C,Ctrl+Win+C 等都会触发此热键.
*ScrollLock::Run Notepad ; 即使在按住其他修饰键时按下 ScrollLock 也会触发此热键.
c::     ;ctrl + c复制快捷键中不激发c功能
*c::    ;ctrl + c复制快捷键中, 同时将激活c功能
;通配符热键总是使用键盘钩子, 因此通配符热键使按下任何热键失效.
;例如, *a:: 出现后会将 ^a:: 改为使用键盘钩子。通过*实现多热键的简化。

;=== $   ===========================================================================================
/*通常只在脚本使用 Send 命令发送包含了热键自身的按键时才需要使用此符号,
此时可以避免触发它自己.$ 前缀强制使用键盘钩子来实现此热键,
作为一个副作用这样避免了 Send 命令触发它自己.
$ 前缀相当于在此热键定义之前的某个位置指定了 #UseHook.$ 前缀对于鼠标热键不起作用,
因为它们始终使用鼠标钩子.它对于已经启用了键盘钩子的热键同样无效,
包括所有与颚化符(~) 或通配符(*) 搭配的修改器,key-up 热键以及自定义组合.
确定特定热键是否使用键盘钩子, 使用 ListHotkeys 查看.
[v1.1.06+]: #InputLevel 和 SendLevel 对 Send 命令是否触发热键和热字串提供了额外的控制功能。
通过$钩子实现了更底层按键的操作。
*/

;=== UP  释放按键时触发热键 ===========================================================================================
/*单词 UP 可以跟在热键名后面使得在释放按键时触发热键, 而不是按下时.
下面的例子把左 Win 重映射为左 Control：
*/
*LWin::Send {LControl down}
*LWin Up::Send {LControl up}

/*Up” 也可以用于普通热键中, 例如: ^!r Up::MsgBox You pressed and released Ctrl+Alt+R.
它还可以用在组合键(例如 F1 & e Up::)限制:
1) “Up” 不能和游戏杆按钮一起使用;
2) 在没有普通/按下热键副本的 “Up” 热键会完全接管那个按键以防被卡住.
避免这种情况的一种方法是添加颚化符(波浪号) 前缀(例如 ~LControl up::)
”Up” 热键和其同行的键(如果有的话) 总是使用键盘钩子.
相关提示, 类似于上面的一种技术是让热键成为前缀键. 好处是尽管热键会在按键松开时激发,
但仅在您之前 按住此前缀键时没有按其他任何键的情况下才会如此. 例如:
LControl & F1::return ; 通过把左 control 键放在 "&" 前面至少一次来让它成为前缀键.
LControl::MsgBox 你按下了左Control.
*/
;=== &   ===========================================================================================
;和符号可以用来组合任意两个按键或鼠标按钮, 让它们成为自定义热键

/*<^>!
AltGr(alternate graving)(译者注: 标准键盘上没有该键).
如果您键盘布局中含 AltGr 键而非右 Alt 键,那么这一系列符号一般可用于表示 AltGr. 例如:
*/
<^>!m::MsgBox 你按下了 AltGr+m.
<^<!m::MsgBox 你按下了 左Control+左Alt+m.
; 或者, 让 AltGr 自己成为热键, 请使用下面的热键(不像上面出现的任何热键):
LControl & RAlt::MsgBox 你按下了 AltGr 它自己.

;=== 热键命名的基本规则 ===========================================================================================
/*
[0-4个修饰符]按键::
    代码块
Return
*/

;这里有个方便记忆的小技巧，设计自己热键的时候可以仿照系统热键的逻辑设计，alt常作为切换的修饰符，例如alt+tab切换窗口、ctrl常做为特定功能的修饰符，例如ctrl+c复制，字母根据使用英文或者中文的首字母，比如b，可以作为百度或B站，这样就可以设置打开百度为ctrl+b。

^b:: ;百度
    Run www.baidu.com
Return
;鉴于0修饰符热键正常情况下覆盖原有按键输出功能，建议使用自己不用的功能按键创建，如insert/printscreen等。要注意的是，经由shift转义的按键，与修饰符有重复，如:

!::      ;感叹号热键，由shift + 1触发，等同于下述第3类修饰符热键
+1::     ;shift + 1，同上个热键
;大部分小键盘转义热键相对特别.

+numpad1::      ;这样的热键shift + 小键盘数字1 将不会执行
numpadend::     ;由于shift转义为纯功能按键numpadend

;=== 组合热键 ===========================================================================================

/*以上就是热键的基础知识了，大约涵盖了热键应用的80%，下面是进阶知识，实际应用中可能20%都不到，
但是要用80%得篇幅来描述，不过会了这20%，热键这块基本可以说无敌了，可以完虐90%普通win电脑用户了。
下面知识的主要方向有两个，一方面是突破上述规则，另一方面就是完善上述设计的固有缺陷。

第一个就从突破上述基本格式可以，从上述的基本格式中，不难发现非修饰符数量只能是一个，
如果想实现多个就要用到上述的一个修饰符&，其格式如下：

按键1 & 按键2::    ;双组合键用 & 连接组合键名称，&两端需要空格间隔
这个一般自定义热键或者组合热键，所谓自定义就是它突破了基本的规则，但是它也是有规则：

只支持两个按键的组合：f1 & f2::正确f1 & f2 & f3::错误
两个按键需要按照写的顺序先后按下，且当两个按键都按下时触发热键。
建议：

组合键在个别情况下修饰符组合键失效报错替换使用，正常情况不建议如此创建办法。
若需要更多连续按键功能关联,建议以热字串代替.
*/

;=== 特殊按键: fn与鼠标侧键等 ===========================================================================================
;第二个突破，就是在面对不知名的按键，如鼠标侧键/fn键，可以通过这种方式获取虚拟键码创建，
;部分的笔记本电脑是获取不到fn键的，这种情况下建议放弃使用该键创建。

#persistent         ;让脚本持久运行不退出
#InstallKeybdHook   ;安装键鼠钩子
#InstallMouseHook   ;安装鼠标钩子

keyhistory          ;显示历史按键
;初始显示列表为空，表格底部提示f5刷新历史，在列表刷新前按下你想创建热键的特殊按键，列表会显示按键详细信息。
;列VK和SC为按键的虚拟键码。
;如下示例鼠标侧键的名称Xbutton1。

XButton1::
VK05::
;这样的热键命名方式都是合法的，fn键未命名，故只能用虚拟键码创建。
;当然普通按键也可以使用虚拟键码来实现热键的设计。
;=== 热键映射 ===========================================================================================
;第三种突破，就是按键按键映射，即按键功能的替换，
;一般用于游戏中调整按键位置来实现更紧凑的操作或用于替换难以按击/物理性损坏难用的按键。

a::Enter    ; 将左侧a键替换为enter键

;这个创建语法不限制热键为组合键或者修饰符组合键激发。
c & d::e
!1::esc











