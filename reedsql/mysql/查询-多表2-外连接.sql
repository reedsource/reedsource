-- 外连接:可以查询不满足一一对应关系的数据;例如:有的员工没有部门,有的部门没有员工,这样的数据不满足一一对应的关系,使用内连接
-- 是查询不到的,但是可以使用外连接进行查询
-- 外连接建立在父子表关系上,可以查询不满足一一对应关系的数据
-- 外连接查询数据的条数 >= 内连接查询数据的条数;数据库会自动为不匹配的数据设置为NULL

-- 外连接的分类
-- 1.左外连接(LEFT OUTER JOIN ON)
-- 2.右外连接(RIGHT OUTER JOIN ON)
-- 3.全外连接(FULL OUTER JOIN ON)


-- 更新数据
UPDATE 员工表
SET 部门编号 = NULL
WHERE 员工编号 = 7369;

SELECT E.员工编号,
       E.员工姓名,
       E.工作,
       E.领导编号,
       E.月薪,
       D.部门编号,
       D.部门名称,
       D.部门位置
FROM 员工表 E
         INNER JOIN 部门表 D ON (E.部门编号 = D.部门编号);

SELECT *
FROM 员工表;
SELECT *
FROM 部门表;


-- ----------------------------------------------------------------------------------------------------------------------
-- 1.左外连接(LEFT OUTER JOIN ON):我们用LEFT OUTER JOIN ON作为分界线,员工表就是左表,左外连接可以把左表中不满足对应关系的数据查询处理
-- 例如:7369这个员工没有对应的部门,可以被查询出来
SELECT E.员工编号, E.员工姓名, D.部门编号, D.部门名称, D.部门位置
FROM 员工表 E
         LEFT OUTER JOIN 部门表 D ON (E.部门编号 = D.部门编号);

-- 左表的位置是相对的,我们也可以把部门当做左表
SELECT E.员工编号, E.员工姓名, D.部门编号, D.部门名称, D.部门位置
FROM 部门表 D
         LEFT OUTER JOIN 员工表 E ON (E.部门编号 = D.部门编号);

-- 使用外连接的时候,OUTER可以忽略
SELECT E.员工编号, E.员工姓名, D.部门编号, D.部门名称, D.部门位置
FROM 员工表 E
         LEFT JOIN 部门表 D ON (E.部门编号 = D.部门编号);


-- ----------------------------------------------------------------------------------------------------------------------
-- 2.右外连接(RIGHT OUTER JOIN ON):用RIGHT OUTER JOIN ON作为分界线,可以把右表中不满足对应关系的数据查询出来
-- 例如我们把部门当做右表,40这个部门没有对应的员工,可以被查询出来
SELECT E.员工编号, E.员工姓名, D.部门编号, D.部门名称, D.部门位置
FROM 员工表 E
         RIGHT OUTER JOIN 部门表 D ON (E.部门编号 = D.部门编号);

-- 右表的位置是相对的,我们有可以把员工表当做右表
SELECT E.员工编号, E.员工姓名, D.部门编号, D.部门名称, D.部门位置
FROM 部门表 D
         RIGHT OUTER JOIN 员工表 E ON (E.部门编号 = D.部门编号);

-- OUTER可以忽略
SELECT E.员工编号, E.员工姓名, D.部门编号, D.部门名称, D.部门位置
FROM 部门表 D
         RIGHT JOIN 员工表 E ON (E.部门编号 = D.部门编号);


-- ----------------------------------------------------------------------------------------------------------------------
-- 3.全外连接(FULL OUTER JOIN ON): 用FULL OUTER JOIN ON作为分界线,可以把左右两个表中不满足对应关系的数据都查询出来

-- Oracle支持全外连接;但是MySql不支持全外连接============
#
SELECT E.员工编号,
       E.员工姓名,
       D.部门编号,
       D.部门名称,
       D.部门位置
           #
FROM 员工表 E #     FULL OUTER JOIN 部门表 D
ON (E.部门编号 = D.部门编号);


-- ======================================================================================================================
-- 从N个表中查询相关的数据,需要N-1个INNER JOIN子句
-- 注意:用多表查询的时候,连接的表越多,查询速度越慢!

-- 查询部门编号是20的员工信息,部门信息,及其工资级别信息
-- SQL1992标准
SELECT E.员工编号,
       E.员工姓名,
       E.月薪,
       D.部门编号,
       D.部门名称,
       D.部门位置,
       S.等级,
       S.最低工资,
       S.最高工资
FROM 员工表 E,
     部门表 D,
     工资级别表 S
WHERE (E.月薪 BETWEEN S.最低工资 AND S.最高工资)
  AND (D.部门编号 = 20)
  AND (E.部门编号 = D.部门编号);

-- SQL1999标准,这种方式结构更加清晰,这是首先方式
SELECT E.员工编号,
       E.员工姓名,
       E.月薪,
       D.部门编号,
       D.部门名称,
       D.部门位置,
       S.等级,
       S.最低工资,
       S.最高工资
FROM 员工表 E
         INNER JOIN 部门表 D ON (E.部门编号 = D.部门编号)
         INNER JOIN 工资级别表 S ON (E.月薪 BETWEEN S.最低工资 AND S.最高工资)
WHERE D.部门编号 = 20;

-- ======================================================================================================================

-- 回顾多表查询
-- 内连接:可以查询满足一一对应关系的数据
-- 1.等值连接:建立在父子表关系上,用=来连接两个表
-- 2.非等值连接:两个表之间没有父子关系,用非等号连接两个表
-- 3.自连接:通过别名将一根表虚拟成两个表(父子表),然后在这两个表上面做等值连接

-- 外连接:建立在父子表关系上,可以查询不满足一一对应关系的数据
-- 1.左外连接(LEFT OUTER JOIN ON)可以把左表中不满足对应关系的数据查询出来
-- 2.右外连接(RIGHT OUTER JOIN ON)可以把右表中不满足对应关系的数据查询出来
-- 3.全外连接(FULL OUTER JOIN ON)可以把左表,右表中不满足对应关系的数据查询出来

