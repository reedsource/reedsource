#定义用户信息
#格式 用户名=密码,角色1，角色2
[users]
zs=123,admin
ls=123,manager,seller
ww=123,clerk

#角色及其权限信息
#预设权限 user:query
#         user:detail:query
#         user:delete
#         user:update
#         order:insert
[roles]
#admin角色，拥有所有权限，用*表示
admin=*
#clerk角色，只有查询权限
clerk=user:query,user:detail:query
#manager角色，拥有user的所有权限
manager=user:*

[main]
#用户在没有登陆时,进入没有权限的界面时，自动跳转的资源地址  本处登陆页
shiro.loginUrl = /user/userLogin.do
#登陆后的用户在没有对应【角色】或则【权限】，需要跳转的资源地址  本处登陆页
shiro.unauthorizedUrl = /user/userLogin.do
#用户在登出系统时，跳转的资源文件。这里指向网站默认欢迎资源文件 index.jsp
shiro.redirectUrl =/

[urls]
/user/login/page = anon
# 指定何种请求，需要由ShiroFilter中何种过滤器进行拦截出来
# 格式  资源文件请求地址 = ShiroFilter中内置过滤器别名

# 例子1  资源文件请求地址 = anon       当前资源被访问时，并不需要用户进行任何登陆验证
/user/userLogin.do = anon

# 例子2  资源文件请求地址 = authc      当前资源被访问时,要求用户必须已经通过登陆验证
/user/userList.do = authc

# 例子3  资源文件请求地址 = authc,roles["角色1","角色2"] 当前资源被访问时,要求用户必须已经通过登陆验证
#        并且具备角色1身份或则角色2身份
# /user/user/userList = authc,roles["clerk"]

# 例子4  资源文件请求地址 = authc,perms["user:delete","user:update"] 当前资源被访问时,要求用户必须已经通过登陆验证
#        并且具备"user:delete" 或则 "user:update" 权限

# 这里需要用户拥有的角色拥有某种权限

# /user/logout.do = logout  logout是ShiroFilter中内置过滤器，负责拦截登出操作请求